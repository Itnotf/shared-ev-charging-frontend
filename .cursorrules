# 澜充小站项目 Cursor AI 编程规则

## 项目概述
- **项目类型**: uni-app Vue2/3 兼容移动端应用（充电桩共享预约系统）
- **主要技术栈**: Vue2/3 + uni-app + SCSS + JavaScript ES6+
- **目标平台**: 微信小程序、App
- **UI 风格**: 橙色主题（#FFA500）现代卡片式设计

## 核心架构原则

### 目录结构规范
```
/api/           - 接口封装层，按业务模块分文件
/components/    - 通用组件，以Common/Base前缀命名
/config/        - 配置文件（环境、常量）
/pages/         - 页面，按功能模块分组
/utils/         - 工具函数，纯函数优先
/static/        - 静态资源
/uni_modules/   - uni-app插件
```

### 命名约定
- **文件/目录**: kebab-case (`user-manage.vue`, `record-detail.vue`)
- **Vue组件**: PascalCase (`BaseGroupItem`, `CommonCard`)
- **函数/变量**: camelCase (`getUserProfile`, `selectedDate`)
- **常量**: UPPER_SNAKE_CASE (`TIMESLOTS`, `API_BASE_URL`)
- **CSS类名**: kebab-case (`.record-item`, `.time-slot`)

## 代码风格规范

### Vue 组件规范
1. **组件结构顺序**:
   ```vue
   <template>
   <!-- 模板内容 -->
   </template>

   <script>
   // import语句
   // export default组件选项
   </script>

   <style lang="scss">
   // 样式，必须使用scss并引入uni.scss
   </style>
   ```

2. **组件选项顺序**:
   ```javascript
   export default {
     name: 'ComponentName',        // 组件名
     components: {},               // 子组件
     props: {},                   // 属性
     data() { return {} },        // 数据
     computed: {},                // 计算属性
     watch: {},                   // 侦听器
     onLoad() {},                 // 生命周期（uni-app）
     onShow() {},
     mounted() {},                // 生命周期（Vue）
     methods: {}                  // 方法
   }
   ```

3. **Props 定义**: 必须指定类型和默认值
   ```javascript
   props: {
     title: {
       type: String,
       default: ''
     },
     showBack: {
       type: Boolean,
       default: true
     }
   }
   ```

### JavaScript 编码规范
1. **优先使用 ES6+ 语法**: 解构赋值、箭头函数、async/await
2. **错误处理**: 所有异步操作必须有 try-catch 或 .catch()
3. **函数设计**: 单一职责，纯函数优先，避免副作用
4. **变量声明**: 优先使用 const，必要时用 let，禁用 var

### 样式规范
1. **必须引入主题**: 每个 `<style>` 都要 `@import '@/uni.scss'`
2. **使用设计系统变量**:
   ```scss
   // 主色调
   color: $main-color;           // #FFA500
   background: $main-color-light; // #FFB84D
   
   // 卡片样式
   border-radius: $card-radius;   // 28rpx
   box-shadow: $card-shadow;      // 统一阴影
   
   // 间距
   margin: $card-margin;          // 20rpx
   padding: $uni-spacing-row-base; // 30rpx
   ```

3. **禁止硬编码**: 不允许直接写 `#FFA500`、`20rpx` 等魔法数字
4. **响应式单位**: 优先使用 `rpx`，文字可用 `rpx` 或 `px`

## API 接口规范

### 统一请求封装
1. **必须使用 `http` 函数**: 从 `@/api/index.js` 导入
   ```javascript
   // ✅ 正确
   import { http } from '@/api/index.js';
   export const getUserProfile = () => http({
     url: '/api/users/profile',
     method: 'GET'
   });

   // ❌ 错误 - 不要直接用uni.request
   uni.request({ url: '/api/users/profile' })
   ```

2. **模块化组织**: 按业务分文件（`auth.js`, `record.js`, `reservation.js`）

3. **响应处理规范**:
   ```javascript
   // 接口返回已经是 res.data，直接使用
   const res = await getUserProfile();
   this.userInfo = res.data || res; // 兼容不同后端返回格式
   ```

### 错误处理模式
```javascript
// 页面中的标准异步调用模式
async loadData() {
  uni.showLoading({ title: '加载中' });
  try {
    const res = await getRecords();
    this.records = Array.isArray(res.data) ? res.data : [];
  } catch (error) {
    uni.showToast({ title: '加载失败', icon: 'none' });
    console.error('加载记录失败:', error);
  } finally {
    uni.hideLoading();
  }
}
```

## 通用组件使用规范

### 强制使用统一组件

1. **卡片容器**: 使用 `CommonCard`
   ```vue
   <CommonCard customClass="my-card">
     <!-- 内容 -->
   </CommonCard>
   ```

2. **列表项**: 使用 `BaseGroup` + `BaseGroupItem`
   ```vue
   <BaseGroup>
     <BaseGroupItem 
       icon="user" 
       title="个人信息" 
       @click="goToProfile"
       rightIcon="right"
     />
   </BaseGroup>
   ```

### 统一跳转方法
```javascript
// 必须使用 utils 中的 goTo，自动处理 tabBar
import { goTo } from '@/utils';
goTo('/pages/profile/index'); // 自动判断用 switchTab 还是 navigateTo
```

## 业务逻辑规范

### 用户认证处理
```javascript
// 使用统一的认证工具
import { userAuth } from '@/utils';

// 检查登录状态
if (!userAuth.check()) {
  goTo('/pages/login/login');
  return;
}

// 获取用户信息
const auth = userAuth.get();
if (auth) {
  const { token, userInfo } = auth;
}
```

### 图片处理规范
```javascript
// 使用统一的图片工具
import { getAvatarUrl, getRecordImageUrl, compressImage } from '@/utils';

// 头像显示
:src="getAvatarUrl(userInfo.avatar)"

// 记录图片显示  
:src="getRecordImageUrl(record.image_url)"

// 图片压缩上传
const compressedPath = await compressImage(filePath, 0.8);
```

### 时间格式化
```javascript
// 使用统一工具
import { formatDate, getCurrentDate } from '@/utils';

formatDate(record.date, 'YYYY年MM月DD日');
getCurrentDate('YYYY-MM');
```

## 页面开发规范

### 生命周期使用
```javascript
export default {
  async onLoad(options) {
    // 页面参数处理
    if (options.id) {
      this.recordId = options.id;
    }
  },
  
  onShow() {
    // 每次显示都需要刷新的数据
    this.loadUserInfo();
  },
  
  onUnload() {
    // 清理定时器、事件监听等
    if (this.pollingTimer) {
      clearInterval(this.pollingTimer);
    }
  }
}
```

### 数据处理规范
```javascript
// 金额处理：后端返回分，前端显示元
amount: (Number(res.data.amount) / 100).toFixed(2)

// 数组安全处理
this.records = Array.isArray(res.data) ? res.data : [];

// 对象安全处理
const userInfo = res.data || {};
```

## 禁止事项

### 绝对禁止
- ❌ 直接使用 `uni.request`（除非特殊需求）
- ❌ 硬编码颜色值（如 `#FFA500`）
- ❌ 硬编码尺寸（如 `20px`、`30rpx`）
- ❌ 在组件中直接调用 `uni.showToast`（应通过 emit 或 props）
- ❌ 在 `utils` 中写 UI 相关代码（应保持纯函数）
- ❌ 不处理异步操作的错误情况

### 强烈不推荐
- 🚫  在页面中直接写卡片/按钮样式（应使用通用组件）
- 🚫  重复的业务逻辑（应提取到 utils 或 mixins）
- 🚫  过长的方法（单个方法超过 50 行需要拆分）
- 🚫  深层嵌套的条件判断（超过 3 层需要重构）

## 性能优化规范

### 图片优化
```javascript
// 图片压缩
const compressedPath = await compressImage(filePath, 0.8);

// 图片缓存
const cachedUrl = await fetchAndCacheImage(imageUrl);
```

### 列表渲染
```vue
<!-- 使用 key 优化渲染 -->
<view v-for="item in list" :key="item.id" class="list-item">
  {{ item.name }}
</view>
```

### 内存管理
```javascript
// 页面卸载时清理资源
onUnload() {
  // 清理定时器
  if (this.timer) clearInterval(this.timer);
  
  // 清理事件监听
  uni.offNetworkStatusChange();
}
```

## 代码注释规范
- 复杂业务逻辑必须添加注释
- API 接口必须注释参数和返回值
- 工具函数必须使用 JSDoc 格式

```javascript
/**
 * 计算充电费用
 * @param {number} kwh - 充电度数
 * @param {number} unitPrice - 单价（元/kWh）
 * @returns {string} 格式化的金额字符串
 */
export const calculateAmount = (kwh, unitPrice) => {
  if (!kwh) return '0.00';
  return (parseFloat(kwh) * unitPrice).toFixed(2);
};
```

## 测试规范
- 所有工具函数应该可测试（纯函数）
- 页面方法应避免直接操作 DOM
- 异步操作必须有错误处理测试路径

## 提交信息规范

### Commit Message 自动生成
- **每次修改完成后**：必须生成符合 Conventional Commits 的英文提交信息
- **格式要求**：使用 `type(scope): description` 格式
- **常用类型**：
  - `feat`: 新功能
  - `fix`: 修复bug
  - `refactor`: 重构代码
  - `style`: 样式调整
  - `docs`: 文档更新
  - `perf`: 性能优化
  - `test`: 测试相关
  - `chore`: 构建/工具链相关
- **示例格式**：
  ```
  feat(user): add avatar upload functionality
  
  - Implement image compression and upload
  - Add avatar preview in profile page
  - Update user info API integration
  
  Closes #123
  ```

## 文档更新规范

### 每次代码更新后必须检查的文档
1. **README.md** 和 **README_CN.md**：
   - 更新功能特性说明
   - 添加新的API接口文档
   - 更新架构变更说明
   - 同步最新版本更新日志

2. **uni_modules_list.md**：
   - 新增/删除 uni_modules 插件时同步更新
   - 确保依赖清单与实际使用保持一致

3. **.cursorrules**：
   - 新增编码规范时及时更新
   - 修改架构原则时同步文档

### 文档更新检查清单
- [ ] API 变更：新增接口在 README 中有说明
- [ ] 架构调整：目录结构、组件层次变化已更新
- [ ] 功能特性：新功能在主要页面章节中有体现
- [ ] 样式规范：主题色、token 化等变更已说明
- [ ] 工具函数：新增 utils 函数有使用说明
- [ ] 插件依赖：uni_modules 变更已同步
- [ ] 版本日志：重要更新添加到更新日志中

### 文档更新操作固化
每次完成代码重构、功能开发、架构调整后，必须执行以下操作：
```bash
# 1. 检查并更新文档内容
# 2. 确保中英文文档同步
# 3. 运行格式检查
npm run format
# 4. 提交时包含文档更新
```

---

遵循以上规范，确保代码质量、维护性和团队协作效率。在编写代码时，优先考虑复用性、可读性和性能。文档与代码同步更新，保持项目信息的准确性和时效性。
